{"version":3,"sources":["scripts/main.js"],"names":["Game","fieldOfGame","fieldSize","length","movable","countMovedCells","numberOfMergeableCells","currentScore","startMessage","document","querySelector","winMessage","loseMessage","fieldRows","rows","scoreboard","findEmptyCells","cellsArray","i","j","push","defineCreatingCellValue","isFour","parseInt","Math","random","findCoordsForNewCell","emptyCellsArray","split","createCell","cellCoords","startGame","clearCells","render","addEventListener","handleArrowPress","changeCellClass","cell","cellNewValue","classList","contains","innerText","remove","add","renderfieldOfGame","cells","renderMesage","currentMesage","renderButton","buttonType","startButton","blur","message","button","createMatrixClone","matrixClone","getTargetValue","fieldTemp","rotationDirection","row","column","targetValue","rotateMatrix","direction","tempField","moveCells","mergeCells","makeChanges","findCellsForMerge","checkWinScenario","checkLoseScenario","prepareForNewRound","finishRound","removeEventListener","setTimeout","finishGame","gameResult","e","preventDefault","code"],"mappings":"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","file":"main.fc50dde5.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nclass Game {\r\n}\r\n\r\nGame.fieldOfGame = [\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n];\r\n\r\n  Game.fieldSize = Game.fieldOfGame.length;\r\n  Game.movable = false;\r\n  Game.countMovedCells = 0;\r\n  Game.numberOfMergeableCells = 0;\r\n  Game.currentScore = 0;\r\n\r\n  Game.startMessage = document.querySelector('.message-start');\r\n  Game.winMessage = document.querySelector('.message-win');\r\n  Game.loseMessage = document.querySelector('.message-lose');\r\n  Game.fieldRows = document.querySelector('.game-field').rows;\r\n  Game.scoreboard = document.querySelector('.game-score');\r\n\r\n  Game.findEmptyCells = function() {\r\n      const cellsArray = [];\r\n\r\n      for (let i = 0; i < Game.fieldSize; i++) {\r\n        for (let j = 0; j < Game.fieldSize; j++) {\r\n          if (Game.fieldOfGame[i][j] === 0) {\r\n            cellsArray.push(`${i}${j}`);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (cellsArray.length === 0) {\r\n        Game.movable = false;\r\n      } else {\r\n        Game.movable = true;\r\n      }\r\n\r\n      return cellsArray;\r\n    }\r\n\r\n  Game.defineCreatingCellValue = function() {\r\n    const isFour = parseInt(Math.random() * 10) + 1;\r\n    if (isFour === 4) {\r\n      return 4;\r\n    } else {\r\n      return 2;\r\n    }\r\n  }\r\n\r\n  Game.findCoordsForNewCell = function() {\r\n    const emptyCellsArray = Game.findEmptyCells();\r\n\r\n    const cellForCreationNumber\r\n      = parseInt(Math.random() * emptyCellsArray.length);\r\n\r\n    return emptyCellsArray[cellForCreationNumber].split('');\r\n  }\r\n\r\n  Game.createCell = function() {\r\n    const cellCoords = Game.findCoordsForNewCell();\r\n\r\n    Game.fieldOfGame[+cellCoords[0]][+cellCoords[1]]\r\n      = Game.defineCreatingCellValue();\r\n  }\r\n\r\n  Game.startGame = function() {\r\n    Game.countMovedCells = 0;\r\n    Game.currentScore = 0;\r\n\r\n    Game.clearCells();\r\n    Game.createCell();\r\n    Game.createCell();\r\n\r\n    Game.render('start', 'start');\r\n\r\n    document.addEventListener('keydown', Game.handleArrowPress);\r\n  }\r\n\r\n  Game.clearCells = function() {\r\n    for (let i = 0; i < Game.fieldSize; i++) {\r\n      for (let j = 0; j < Game.fieldSize; j++) {\r\n        Game.fieldOfGame[i][j] = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  Game.changeCellClass = function(cell, cellNewValue) {\r\n    if (cell.classList.contains(`field-cell--${cell.innerText}`)) {\r\n      cell.classList.remove(`field-cell--${cell.innerText}`);\r\n    }\r\n\r\n    if (cellNewValue !== 0) {\r\n      cell.classList.add(`field-cell--${cellNewValue}`);\r\n    }\r\n  }\r\n\r\n  Game.renderfieldOfGame = function() {\r\n    for (let i = 0; i < Game.fieldSize; i++) {\r\n      for (let j = 0; j < Game.fieldSize; j++) {\r\n        if (Game.fieldOfGame[i][j] !== 0) {\r\n          Game.changeCellClass(Game.fieldRows[i].cells[j],\r\n             Game.fieldOfGame[i][j]);\r\n          Game.fieldRows[i].cells[j].innerText = Game.fieldOfGame[i][j];\r\n        } else {\r\n          Game.changeCellClass(Game.fieldRows[i].cells[j],\r\n           Game.fieldOfGame[i][j]);\r\n          Game.fieldRows[i].cells[j].innerText = '';\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  Game.renderMesage = function(currentMesage) {\r\n    switch (currentMesage) {\r\n      case 'win':\r\n        Game.winMessage.classList.remove('hidden');\r\n        break;\r\n\r\n      case 'lose':\r\n        Game.loseMessage.classList.remove('hidden');\r\n        break;\r\n\r\n      case 'prepareForStart':\r\n        Game.winMessage.classList.add('hidden');\r\n        Game.loseMessage.classList.add('hidden');\r\n        Game.startMessage.classList.remove('hidden');\r\n        break;\r\n\r\n      case 'start':\r\n        Game.startMessage.classList.add('hidden');\r\n        Game.winMessage.classList.add('hidden');\r\n        Game.loseMessage.classList.add('hidden');\r\n    }\r\n  }\r\n\r\n  Game.renderButton = function(buttonType) {\r\n    const startButton = document.querySelector('.start');\r\n\r\n    switch (buttonType) {\r\n      case 'prepareForStart':\r\n        startButton.addEventListener('click', () => Game.startGame());\r\n\r\n        startButton.classList.add('start');\r\n        startButton.innerText = 'Start';\r\n        startButton.blur();\r\n\r\n        break;\r\n\r\n      case 'start':\r\n        if (startButton) {\r\n          startButton.classList.remove('start');\r\n          startButton.classList.add('restart');\r\n          startButton.innerText = 'Restart';\r\n          startButton.blur();\r\n        } else {\r\n          const restartButton = document.querySelector('.restart');\r\n          restartButton.blur();\r\n        }\r\n\r\n        break;\r\n    }\r\n  }\r\n\r\n  Game.render = function(message, button) {\r\n    Game.renderfieldOfGame();\r\n    Game.scoreboard.innerText = Game.currentScore;\r\n    Game.renderMesage(message);\r\n    Game.renderButton(button);\r\n  }\r\n\r\n  Game.createMatrixClone = function() {\r\n    const matrixClone = [\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n    ];\r\n\r\n    for (let i = 0; i < Game.fieldSize; i++) {\r\n      for (let j = 0; j < Game.fieldSize; j++) {\r\n        matrixClone[i][j] = Game.fieldOfGame[i][j];\r\n      }\r\n    }\r\n\r\n    return matrixClone;\r\n  }\r\n\r\n  Game.getTargetValue = function(fieldTemp, rotationDirection, row, column) {\r\n    let targetValue;\r\n\r\n    switch (rotationDirection) {\r\n      case 'left':\r\n        targetValue = fieldTemp[column][Game.fieldSize - row - 1];\r\n        break;\r\n\r\n      case 'right':\r\n        targetValue = fieldTemp[Game.fieldSize - column - 1][row];\r\n        break;\r\n\r\n      case 'down':\r\n        targetValue = fieldTemp[Game.fieldSize - row - 1][column];\r\n        break;\r\n    }\r\n\r\n    return targetValue;\r\n  }\r\n\r\n  Game.rotateMatrix = function(direction) {\r\n    const tempField = Game.createMatrixClone(Game.fieldOfGame);\r\n\r\n    for (let i = 0; i < Game.fieldSize; i++) {\r\n      for (let j = 0; j < Game.fieldSize; j++) {\r\n        Game.fieldOfGame[i][j]\r\n           = Game.getTargetValue(tempField, direction, i, j);\r\n      }\r\n    }\r\n  }\r\n\r\n  Game.moveCells = function() {\r\n    for (let i = Game.fieldSize - 1; i > 0; i--) {\r\n      for (let j = 0; j < Game.fieldSize; j++) {\r\n        if (Game.fieldOfGame[i - 1][j] === 0\r\n            && Game.fieldOfGame[i][j] !== 0) {\r\n          Game.fieldOfGame[i - 1][j] = Game.fieldOfGame[i][j];\r\n          Game.fieldOfGame[i][j] = 0;\r\n          Game.countMovedCells++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  Game.mergeCells = function() {\r\n    for (let i = 0; i < Game.fieldSize - 1; i++) {\r\n      for (let j = 0; j < Game.fieldSize; j++) {\r\n        if (Game.fieldOfGame[i][j] === Game.fieldOfGame[i + 1][j]\r\n            && Game.fieldOfGame[i][j] !== 0) {\r\n          Game.fieldOfGame[i][j] = Game.fieldOfGame[i + 1][j] * 2;\r\n          Game.fieldOfGame[i + 1][j] = 0;\r\n          Game.currentScore += Game.fieldOfGame[i][j];\r\n          Game.countMovedCells++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  Game.makeChanges = function() {\r\n    for (let i = 0; i < Game.fieldSize - 1; i++) {\r\n      Game.moveCells();\r\n    }\r\n\r\n    Game.mergeCells();\r\n\r\n    for (let i = 0; i < Game.fieldSize - 1; i++) {\r\n      Game.moveCells();\r\n    }\r\n  }\r\n\r\n  Game.findCellsForMerge = function() {\r\n    for (let i = 0; i < Game.fieldSize - 1; i++) {\r\n      for (let j = 0; j < Game.fieldSize; j++) {\r\n        if (Game.fieldOfGame !== 0) {\r\n          if (Game.fieldOfGame[i][j] === Game.fieldOfGame[i + 1][j]) {\r\n            Game.numberOfMergeableCells++;\r\n\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < Game.fieldSize; i++) {\r\n      for (let j = 0; j < Game.fieldSize - 1; j++) {\r\n        if (Game.fieldOfGame !== 0) {\r\n          if (Game.fieldOfGame[i][j] === Game.fieldOfGame[i][j + 1]) {\r\n            Game.numberOfMergeableCells++;\r\n\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  Game.checkWinScenario = function() {\r\n    for (let i = 0; i < Game.fieldSize; i++) {\r\n      for (let j = 0; j < Game.fieldSize; j++) {\r\n        if (Game.fieldOfGame[i][j] === 2048) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  Game.checkLoseScenario = function() {\r\n    if (!Game.movable && Game.numberOfMergeableCells === 0) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  Game.prepareForNewRound = function() {\r\n    document.addEventListener('keydown', Game.handleArrowPress);\r\n    Game.countMovedCells = 0;\r\n    Game.movable = false;\r\n    Game.numberOfMergeableCells = 0;\r\n\r\n    Game.render('start', 'start');\r\n  }\r\n\r\n  Game.finishRound = function() {\r\n    if (Game.countMovedCells === 0) {\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('keydown', Game.handleArrowPress);\r\n\r\n    if (Game.checkWinScenario()) {\r\n      Game.render('start', 'start');\r\n\r\n      setTimeout(() => {\r\n        Game.finishGame('win');\r\n      }, 1000);\r\n\r\n      return;\r\n    }\r\n\r\n    setTimeout(Game.createCell, 200);\r\n\r\n    setTimeout(() => {\r\n      Game.findEmptyCells();\r\n      Game.findCellsForMerge();\r\n\r\n      if (Game.checkLoseScenario()) {\r\n        Game.render('start', 'start');\r\n        Game.finishGame('lose');\r\n\r\n        return;\r\n      }\r\n\r\n      Game.prepareForNewRound();\r\n    }, 300);\r\n  }\r\n\r\n  Game.finishGame = function(gameResult) {\r\n    document.removeEventListener('keydown', Game.handleArrowPress);\r\n\r\n    Game.clearCells();\r\n\r\n    Game.currentScore = 0;\r\n\r\n    if (gameResult === 'win') {\r\n      Game.render('win', 'start');\r\n    } else {\r\n      Game.loseMessage.classList.remove('hidden');\r\n    }\r\n  }\r\n\r\n  Game.handleArrowPress = function(e) {\r\n    e.preventDefault();\r\n\r\n    switch (e.code) {\r\n      case 'ArrowUp':\r\n        Game.makeChanges();\r\n        Game.finishRound();\r\n        break;\r\n\r\n      case 'ArrowDown':\r\n        Game.rotateMatrix('down');\r\n        Game.makeChanges();\r\n        Game.rotateMatrix('down');\r\n        Game.finishRound();\r\n        break;\r\n\r\n      case 'ArrowLeft':\r\n        Game.rotateMatrix('right');\r\n        Game.makeChanges();\r\n        Game.rotateMatrix('left');\r\n        Game.finishRound();\r\n        break;\r\n\r\n      case 'ArrowRight':\r\n        Game.rotateMatrix('left');\r\n        Game.makeChanges();\r\n        Game.rotateMatrix('right');\r\n        Game.finishRound();\r\n        break;\r\n    }\r\n  }\r\n\r\nGame.render('prepareForStart', 'prepareForStart');\r\n"]}